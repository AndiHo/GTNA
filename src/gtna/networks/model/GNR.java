package gtna.networks.model;

import java.util.Random;

import gtna.graph.Edge;
import gtna.graph.Edges;
import gtna.graph.Graph;
import gtna.graph.NodeImpl;
import gtna.networks.Network;
import gtna.networks.NetworkImpl;
import gtna.routing.RoutingAlgorithm;
import gtna.transformation.Transformation;
import gtna.util.Timer;

/**
 * Implements a network generator for GNR, the Growing Network with
 * Re-direction. This network growth model was introduced by Krapivsky and
 * Redner in their paper "Organization of growing random networks" (2001) and is
 * directly based on the Growing Network model (GN) also described in this
 * publication. In each step, a new node joins the network. A global probability
 * for redirection (PR) is given. With probability 1-PR, the new node simply
 * established a connection to a randomly chosen bootstrap node already in the
 * system. Otherwise (with probability PR), the new node connects to the parent
 * / predecessor of the node in the tree generated by this construction (each
 * node, except the first one, has one outgoing link to a parent and possibly
 * multiple incomming connection from child nodes).
 * 
 * Parameters are a flag for bidirectionality and the redirection probability.
 * If bidirectionality is true, every edge is added in both directions. Note
 * that in the original model, this parameter would be set to false as all
 * connections are unidirectional.
 * 
 * @author benni
 * 
 */
public class GNR extends NetworkImpl implements Network {
	private boolean BIDIRECTIONAL;

	private double REDIRECTION_PROBABILITY;

	public GNR(int nodes, boolean BIDIRECTIONAL,
			double REDIRECTION_PROBABILITY, RoutingAlgorithm ra,
			Transformation[] t) {
		super("GNR", nodes, new String[] { "BIDIRECTIONAL",
				"REDIRECTION_PROBABILITY" }, new String[] { "" + BIDIRECTIONAL,
				"" + REDIRECTION_PROBABILITY }, ra, t);
		this.BIDIRECTIONAL = BIDIRECTIONAL;
		this.REDIRECTION_PROBABILITY = REDIRECTION_PROBABILITY;
	}

	public Graph generate() {
		Timer timer = new Timer();
		Random rand = new Random(System.currentTimeMillis());
		NodeImpl[] nodes = NodeImpl.init(this.nodes());
		Edges edges = new Edges(nodes, 100);
		for (int i = 1; i < nodes.length; i++) {
			NodeImpl bootstrap = nodes[rand.nextInt(i)];
			if (rand.nextDouble() <= this.REDIRECTION_PROBABILITY) {
				boolean found = false;
				for (int j = 0; j < i; j++) {
					if (edges.contains(new Edge(bootstrap, nodes[j]))) {
						edges.add(nodes[i], nodes[j]);
						if (this.BIDIRECTIONAL) {
							edges.add(nodes[j], nodes[i]);
						}
						found = true;
						break;
					}
				}
				if (!found) {
					edges.add(new Edge(nodes[i], bootstrap));
					if (this.BIDIRECTIONAL) {
						edges.add(new Edge(bootstrap, nodes[i]));
					}
				}
			} else {
				edges.add(new Edge(nodes[i], bootstrap));
				if (this.BIDIRECTIONAL) {
					edges.add(new Edge(bootstrap, nodes[i]));
				}
			}
		}
		edges.fill();
		timer.end();
		Graph g = new Graph(this.description(), nodes, timer);
		return g;
	}
}
