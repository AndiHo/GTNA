/*
 * ===========================================================
 * GTNA : Graph-Theoretic Network Analyzer
 * ===========================================================
 * 
 * (C) Copyright 2009-2011, by Benjamin Schiller (P2P, TU Darmstadt)
 * and Contributors
 * 
 * Project Info:  http://www.p2p.tu-darmstadt.de/research/gtna/
 * 
 * GTNA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GTNA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * ---------------------------------------
 * Metric.java
 * ---------------------------------------
 * (C) Copyright 2009-2011, by Benjamin Schiller (P2P, TU Darmstadt)
 * and Contributors 
 * 
 * Original Author: Benjamin Schiller;
 * Contributors:    -;
 * 
 * Changes since 2011-05-17
 * ---------------------------------------
*/
package gtna.metrics;

import gtna.data.Value;
import gtna.graph.Graph;
import gtna.networks.Network;

import java.util.Hashtable;

//TODO reimplement Metric
public interface Metric {
	/**
	 * computes all metric-specific data<br>
	 * has to be called before any other method
	 * 
	 * @param g
	 */
	public void computeData(Graph g, Network n, Hashtable<String, Metric> m);

	/**
	 * writes all generated data to the specified folder
	 * 
	 * @param folder
	 * @return true if operation is successful
	 */
	public boolean writeData(String folder);

	/**
	 * all single-scalar values generated by this metric
	 * 
	 * @param values
	 * @return single scalar values
	 */
	public Value[] getValues(Value[] values);

	/**
	 * name of the metric
	 * 
	 * @return name of the metric
	 */
	public String name();

	/**
	 * ke of the metric (mkey)
	 * 
	 * @return key of the metric (mkey)
	 */
	public String key();

	/**
	 * data keys of this metric
	 * 
	 * @return data keys of this metric
	 */
	public String[] dataKeys();

	/**
	 * single-scalar value keys
	 * 
	 * @return single-scalar valcue keys
	 */
	public String[] singlesKeys();

	public String[] dataPlots();

	public String[] singlesPlots();
}
